// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pivot_cpp
arma::mat pivot_cpp(int row_ind, int col_ind, arma::mat table_simpl_tran);
RcppExport SEXP _ahMLE_pivot_cpp(SEXP row_indSEXP, SEXP col_indSEXP, SEXP table_simpl_tranSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row_ind(row_indSEXP);
    Rcpp::traits::input_parameter< int >::type col_ind(col_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type table_simpl_tran(table_simpl_tranSEXP);
    rcpp_result_gen = Rcpp::wrap(pivot_cpp(row_ind, col_ind, table_simpl_tran));
    return rcpp_result_gen;
END_RCPP
}
// mle_simpl_FStep_Cpp
NumericVector mle_simpl_FStep_Cpp(int time_indicator, NumericMatrix InputData, NumericMatrix Domain);
RcppExport SEXP _ahMLE_mle_simpl_FStep_Cpp(SEXP time_indicatorSEXP, SEXP InputDataSEXP, SEXP DomainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time_indicator(time_indicatorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type InputData(InputDataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Domain(DomainSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_simpl_FStep_Cpp(time_indicator, InputData, Domain));
    return rcpp_result_gen;
END_RCPP
}
// mle_loop_Cpp_sub
NumericVector mle_loop_Cpp_sub(int time_indicator, NumericMatrix InputData, NumericMatrix Domain);
RcppExport SEXP _ahMLE_mle_loop_Cpp_sub(SEXP time_indicatorSEXP, SEXP InputDataSEXP, SEXP DomainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time_indicator(time_indicatorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type InputData(InputDataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Domain(DomainSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_loop_Cpp_sub(time_indicator, InputData, Domain));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ahMLE_pivot_cpp", (DL_FUNC) &_ahMLE_pivot_cpp, 3},
    {"_ahMLE_mle_simpl_FStep_Cpp", (DL_FUNC) &_ahMLE_mle_simpl_FStep_Cpp, 3},
    {"_ahMLE_mle_loop_Cpp_sub", (DL_FUNC) &_ahMLE_mle_loop_Cpp_sub, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ahMLE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
